<?php namespace $NAME_SPACE_CONTROLLER$;

use $NAME_SPACE_REQUEST$\Create$MODEL_NAME$Request;
use $NAME_SPACE_REQUEST$\Update$MODEL_NAME$Request;
use App\Http\Requests\IndexRequest;
use App\Http\Requests\ShowRequest;
use Illuminate\Http\JsonResponse;
use $NAME_SPACE_REPOSITORY$\$MODEL_NAME$Repository;
use zgldh\Scaffold\AppBaseController;

class $MODEL_NAME$Controller extends AppBaseController
{

    public function __construct($MODEL_NAME$Repository $$MODEL_NAME_LOWER$Repository)
    {
        $this->repository = $$MODEL_NAME_LOWER$Repository;
        $CONTROLLER_MIDDLEWARE$
    }

    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @param Request $request
     * @return Response
     */
    public function index(IndexRequest $request)
    {
          $with = $request->getWith();
          $data = $this->repository->datatables(null, $with);
          return $data;
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Create$MODEL_NAME$Request $request
     * @return JsonResponse
     */
    public function store(Create$MODEL_NAME$Request $request)
    {
        $input = $request->all();

        $$MODEL_NAME_LOWER$ = $this->repository->create($input);

        return $this->sendResponse($$MODEL_NAME_LOWER$, '$MODEL_NAME$ saved successfully.');
    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return JsonResponse
     */
    public function show($id, ShowRequest $request)
    {
        $this->repository->with($request->getWith());
        $$MODEL_NAME_LOWER$ = $this->repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_LOWER$)) {
            return $this->sendError('$MODEL_NAME$ not found');
        }

        return $this->sendResponse($$MODEL_NAME_LOWER$, '');
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param  int $id
     * @param Update$MODEL_NAME$Request $request
     *
     * @return JsonResponse
     */
    public function update($id, Update$MODEL_NAME$Request $request)
    {
        $$MODEL_NAME_LOWER$ = $this->repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_LOWER$)) {
            return $this->sendError('$MODEL_NAME$ not found');
        }

        $$MODEL_NAME_LOWER$ = $this->repository->update($request->all(), $id);

        return $this->sendResponse($$MODEL_NAME_LOWER$, '$MODEL_NAME$ updated successfully.');
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param  int $id
     *
     * @return JsonResponse
     */
    public function destroy($id)
    {
        $$MODEL_NAME_LOWER$ = $this->repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_LOWER$)) {
            return $this->sendError('$MODEL_NAME$ not found');
        }

        $this->repository->delete($id);
        return $this->sendResponse($$MODEL_NAME_LOWER$, '$MODEL_NAME$ deleted successfully.');
    }
}
